{"version":3,"sources":["Components/Layout/Layout.jsx","Components/Editor.jsx","Components/Preview.jsx","App.js","reportWebVitals.js","index.js"],"names":["Layout","children","title","className","Editor","onChange","markdownValue","id","value","Preview","renderer","marked","Renderer","link","href","text","setOptions","breaks","dangerouslySetInnerHTML","__html","App","useState","setMarkdownValue","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAmBeA,EAfA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAb,OACb,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,sBAAMA,UAAU,sBAAhB,SAAuCD,MAGzC,qBAAKC,UAAU,iBAAf,SAAiCF,QCEtBG,EATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,cAAb,OACb,0BAAUC,GAAG,SAASC,MAAOF,EAAeD,SAAUA,K,gBCsBzCI,EAtBC,SAAC,GAAuB,IAArBH,EAAoB,EAApBA,cACXI,EAAW,IAAIC,IAAOC,SAS5B,OARAF,EAASG,KAAO,SAASC,EAAMZ,EAAOa,GACpC,MAAM,2BAAN,OAAkCD,EAAlC,YAA0CC,EAA1C,SAGFJ,IAAOK,WAAW,CAChBC,QAAQ,IAIR,qBACEV,GAAG,UACHW,wBAAyB,CAAEC,OAAQR,IAAOL,EAAe,CAAEI,iB,MCqBlDU,MA/Bf,WACE,MAAwCC,mBAAS,sQAAjD,mBAAOf,EAAP,KAAqBgB,EAArB,KAUA,OACE,sBAAKnB,UAAU,MAAf,UACI,oBAAIA,UAAU,aAAd,wDACA,uBAAMA,UAAU,cAAhB,UACE,cAAC,EAAD,CAAQD,MAAM,SAAd,SACE,cAAC,EAAD,CACEG,SAAW,SAAAkB,GAAC,OAAGD,EAAiBC,EAAEC,OAAOhB,QACzCF,cAAeA,MAGnB,cAAC,EAAD,CAAQJ,MAAM,UAAd,SACE,cAAC,EAAD,CAASI,cAAeA,aCjBrBmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2f4c49db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Layout.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Layout = ({ children, title }) => (\r\n  <div className=\"Layout\">\r\n    <div className=\"Layout-header\">\r\n      <span className=\"Layout-header-title\">{title}</span>\r\n    \r\n    </div>\r\n    <div className=\"Layout-content\">{children}</div>\r\n  </div>\r\n);\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Layout;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Editor = ({ onChange, markdownValue }) => (\r\n  <textarea id=\"editor\" value={markdownValue} onChange={onChange} />\r\n);\r\n\r\nEditor.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  markdownValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Editor;","import React from 'react';\r\nimport marked from 'marked';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Preview = ({ markdownValue }) => {\r\n  const renderer = new marked.Renderer();\r\n  renderer.link = function(href, title, text) {\r\n    return `<a target=\"_blank\" href=${href}>${text}</a>`;\r\n  };\r\n\r\n  marked.setOptions({\r\n    breaks: true\r\n  });\r\n\r\n  return (\r\n    <div\r\n      id=\"preview\"\r\n      dangerouslySetInnerHTML={{ __html: marked(markdownValue, { renderer }) }}\r\n    />\r\n  );\r\n};\r\n\r\nPreview.propTypes = {\r\n  markdownValue: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Preview;","import React, { useState } from 'react';\r\nimport Layout from './Components/Layout/Layout'; \r\nimport Editor from './Components/Editor';\r\nimport Preview from './Components/Preview';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  const [markdownValue,setMarkdownValue]= useState(`# Hi everyone\r\n  ## Your markdown preview will show up here\r\n  [freeCodeCamp](https://www.freecodecamp.org/)\r\n  Front End Libraries Projects\r\n  - Random Quote Machine\r\n  - Markdown Previewer\r\n  - Drum Machine\r\n  - Javascript Calculator\r\n  - Pomodoro Clock\r\n `);\r\n  return (\r\n    <div className=\"App\">\r\n        <h1 className=\"App-header\">freeCodeCamp Front end Libraries Challenge</h1>\r\n        <main className=\"App-content\">\r\n          <Layout title=\"Editor\">\r\n            <Editor\r\n              onChange={ e=> setMarkdownValue(e.target.value)}\r\n              markdownValue={markdownValue}\r\n            />\r\n          </Layout>\r\n          <Layout title=\"Preview\">\r\n            <Preview markdownValue={markdownValue} />\r\n          </Layout>\r\n        </main>\r\n      </div>\r\n     );\r\n  }\r\n \r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}